name: deploy

on:
  workflow_run:
    workflows: [infra]
    types: [completed]
    branches: [main]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  ZONE: europe-west2-b
  ARTIFACT_REGISTRY_DOMAIN: europe-west2-docker.pkg.dev
  REPOSITORY_NAME: dockerized-flask-on-gce
  IMAGE_NAME: dockerized-flask-on-gce
  INSTANCE_NAME: container-optimized-os-vm-for-dockerized-flask-on-gce

jobs:
  setup-build-tag-publish-deploy:
    name: Setup, build, tag, publish, deploy
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker to use the gcloud command-line tool as a credential helper for authentication
        run: gcloud --quiet auth configure-docker

      - name: Build Docker image
        run: docker build --tag ${{ env.IMAGE_NAME }}:${{ github.sha }} .

      - name: Configure Docker Client
        run: |-
          gcloud auth configure-docker --quiet
          gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY_DOMAIN }} --quiet

      - name: Publish Docker image to GCP Artifact Registry
        run: |-
          docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.ARTIFACT_REGISTRY_DOMAIN }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.ARTIFACT_REGISTRY_DOMAIN }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.ARTIFACT_REGISTRY_DOMAIN }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.ARTIFACT_REGISTRY_DOMAIN }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:latest

      - name: Deploy latest version of Docker image to container-optimized GCE VM
        run: |-
          gcloud compute instances update-container ${{ env.INSTANCE_NAME }} \
            --zone ${{ env.ZONE }} \
            --container-image ${{ env.ARTIFACT_REGISTRY_DOMAIN }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Prune unused Docker images from GCE instance
        run: |-
          gcloud compute config-ssh
          gcloud compute ssh ${{ env.INSTANCE_NAME }} --zone ${{ env.ZONE }} --command "docker image prune -af"
